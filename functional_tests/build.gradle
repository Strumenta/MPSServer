import de.itemis.mps.gradle.BuildLanguages
import de.itemis.mps.gradle.TestLanguages
import de.itemis.mps.gradle.GenerateLibrariesXml
import de.itemis.mps.gradle.RunAntScript

buildscript {
    repositories {
        maven { url 'https://projects.itemis.de/nexus/content/repositories/mbeddr' }
        mavenCentral()
        mavenLocal()
        jcenter()
    }

    dependencies {
        classpath 'de.itemis.mps:mps-gradle-plugin:1.0.85.03fbeda'
    }
}

plugins {
    id 'base'
    id 'maven-publish'
}

configurations {
	mps
	mpsArtifacts
	jdk
	ant_lib
	libs
	distribution
}

apply from: '../versions.gradle'

dependencies {
	ant_lib "org.apache.ant:ant-junit:1.10.1"
	mps "com.jetbrains:mps:$mpsVersion"
}

repositories {	
	mavenCentral()
	maven {
		url 'https://projects.itemis.de/nexus/content/groups/OS/'
	}
}

if (!hasProperty("jdk_home")) {
    def java_home = System.properties['java.home']
    def jdk_home = java_home

    // In JDK >=11 we look for javac
    if (!file("$jdk_home/bin/javac").isFile() && !file("$jdk_home/bin/javac.exe").isFile()) {
        // In JDK <11 we look for the tools.jar
        if (!file("$jdk_home/lib/tools.jar").isFile()) {
            jdk_home = jdk_home + "/.."
        }
        if (!file("$jdk_home/lib/tools.jar").isFile()) {
            throw new GradleException("Not finding the JDK...")
        }       
    } 
    
    ext.jdk_home = jdk_home
}

ext.artifactsDir = new File(rootDir, 'mps_example_project_withextension/artifacts')
ext.mpscode = new File(rootDir, 'mps_example_project_withextension')
ext.mpsDir = project.hasProperty('mpsPath') ? new File("${mpsPath}") : new File(artifactsDir, 'mps')
ext.buildScriptClasspath = project.configurations.ant_lib.fileCollection({
	true
}) + project.files("$project.jdk_home/lib/tools.jar")
ext.antScriptArgs =  [
   "-Dmps.home=${mpsDir.getAbsolutePath()}",
   "-Dproject.home=${mpscode.getAbsolutePath()}",
   "-Dproject.home=${mpscode.getAbsolutePath()}",
   "-Dmps.macro.project.home=${mpscode.getAbsolutePath()}",   
   "-Dartifacts.root=${artifactsDir.getAbsolutePath()}",
   "-Dmps.macro.artifacts.root=${artifactsDir.getAbsolutePath()}",
   "-Djava.awt.headless=true"
]
	
task resolveMps(type: Copy) {
	if (!project.hasProperty('mpsPath')) {
		println "Downloading MPS in ${mpsDir.getAbsolutePath()}"
		from {
			configurations.mps.resolve().collect { zipTree(it) }
		}
		into mpsDir
	} else {
		println "MPS already installed in ${mpsDir.getAbsolutePath()}"
	}
}

task resolveMpsArtifacts(type: Copy) {
	from {
		configurations.mpsArtifacts.resolve().collect { zipTree(it) }
	}
	into artifactsDir
}

task resolveLibs(type: Sync) {
    from configurations.libs
    into file('mpscode/solutions/com.strumenta.mpsserver.deps/libs')
    preserve {
        include 'mpsserver-dependencies-*.jar'
    }

    rename { filename ->
        def ra = configurations.libs.resolvedConfiguration.resolvedArtifacts.find { ResolvedArtifact ra -> ra.file.name == filename }
        String finalName
        if (ra.classifier != null) {
            finalName = "${ra.name}-${ra.classifier}.${ra.extension}"
        } else {
            finalName = "${ra.name}.${ra.extension}"
        }
        println("Renaming $filename into $finalName")
        return finalName
    }
}

def parentRootDir = rootDir.getParentFile()
def buildDir = new File(parentRootDir, "build")
def distributionsDir = new File(buildDir, "distributions")
File destDir = new File(new File("mps_example_project_withextension"), "artifacts");

task unpackExtensionkit(type: Copy) {
    def componentName = "extensionkit"
    def zipFile = new File(distributionsDir, "com.strumenta.mpsserver.${componentName}-${mpsServerVersion}.zip")
    if (!zipFile.exists()) {
        throw new RuntimeException("component not found: ${zipFile.getAbsolutePath()}")
    }

    from zipTree(zipFile.getPath())
    into destDir
}

task unpackBuild(type: Copy) {
    def componentName = "build"
    def zipFile = new File(distributionsDir, "com.strumenta.mpsserver.${componentName}-${mpsServerVersion}.zip")
    if (!zipFile.exists()) {
        throw new RuntimeException("component not found: ${zipFile.getAbsolutePath()}")
    }

    from zipTree(zipFile.getPath())
    into destDir
}

task unpackMPSServer(dependsOn: ["unpackExtensionkit", "unpackBuild"]) {
}

task setuplocal {
	dependsOn resolveMps, unpackMPSServer, resolveMpsArtifacts, resolveLibs
}

// Alias setuplocal as setup
task setup(dependsOn: setuplocal)

task generateBuildAntScripts(type: BuildLanguages, dependsOn: [setuplocal]) {
	scriptArgs = antScriptArgs
	scriptClasspath = buildScriptClasspath
	script new File('mps_example_project_withextension/build-meta.xml')
}

task buildProtocolLanguage(type: BuildLanguages, dependsOn: [generateBuildAntScripts]) {
	scriptArgs = antScriptArgs
	scriptClasspath = buildScriptClasspath
	script new File('mps_example_project_withextension/build-core.xml')
}
