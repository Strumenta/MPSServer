import de.itemis.mps.gradle.BuildLanguages
import de.itemis.mps.gradle.TestLanguages
import de.itemis.mps.gradle.GenerateLibrariesXml
import de.itemis.mps.gradle.RunAntScript

buildscript {
    repositories {
        maven { url 'https://projects.itemis.de/nexus/content/repositories/mbeddr' }
        mavenCentral()
        mavenLocal()
        jcenter()
    }

    dependencies {
        classpath 'de.itemis.mps:mps-gradle-plugin:1.0.85.03fbeda'
    }
}

plugins {
    id 'base'
    id 'maven-publish'
    id "com.github.breadmoirai.github-release" version "2.2.12"
    id "com.jfrog.bintray" version "1.8.5"
}

group "com.strumenta.mpsserver"
description = "MpsServer"
version = '1.2.2-snapshot'

configurations {
	mps
	mpsArtifacts
	jdk
	ant_lib
	libs
	distribution
}

ext.mpsVersion = '2019.3.1'

dependencies {
	ant_lib "org.apache.ant:ant-junit:1.10.1"
	mps "com.jetbrains:mps:$mpsVersion"
    libs 'com.beijunyi:parallelgit-filesystem:2.0.0'
}

repositories {	
	mavenCentral()
	maven {
		url 'https://projects.itemis.de/nexus/content/groups/OS/'
	}
}

if (!hasProperty("jdk_home")) {
	def java_home = System.properties['java.home']
	def jdk_home = java_home

	// In JDK >=11 we look for javac
	if (!file("$jdk_home/bin/javac").isFile() && !file("$jdk_home/bin/javac.exe").isFile()) {
		// In JDK <11 we look for the tools.jar
		if (!file("$jdk_home/lib/tools.jar").isFile()) {
			jdk_home = jdk_home + "/.."
		}
		if (!file("$jdk_home/lib/tools.jar").isFile()) {
			throw new GradleException("Not finding the JDK...")
		}		
	} 
	
	ext.jdk_home = jdk_home
}

ext.artifactsDir = new File(rootDir, 'artifacts')
ext.mpscode = new File(rootDir, 'mpscode')
ext.mpsDir = project.hasProperty('mpsPath') ? new File("${mpsPath}") : new File(artifactsDir, 'mps')
ext.distributionDependenciesDir = new File(buildDir, 'distribution-dependencies')
ext.buildScriptClasspath = project.configurations.ant_lib.fileCollection({
	true
}) + project.files("$project.jdk_home/lib/tools.jar")
ext.antScriptArgs =  [
   "-Dmps.home=${mpsDir.getAbsolutePath()}",
   "-Dproject.home=${mpscode.getAbsolutePath()}",
   "-Dmpsserver.home=${mpscode.getAbsolutePath()}",
   "-Dmps.macro.mpsserver.home=${mpscode.getAbsolutePath()}",
   "-Dmpsserver.version=${project.version}",
   "-Dartifacts.root=${artifactsDir.getAbsolutePath()}",
   "-Djava.awt.headless=true"
]
	
task resolveMps(type: Copy) {
	if (!project.hasProperty('mpsPath')) {
		println "Downloading MPS in ${mpsDir.getAbsolutePath()}"
		from {
			configurations.mps.resolve().collect { zipTree(it) }
		}
		into mpsDir
	} else {
		println "MPS already installed in ${mpsDir.getAbsolutePath()}"
	}
}

task resolveMpsArtifacts(type: Copy) {
	from {
		configurations.mpsArtifacts.resolve().collect { zipTree(it) }
	}
	into artifactsDir
}

task resolveLibs(type: Sync) {
    from configurations.libs
    into file('mpscode/solutions/com.strumenta.mpsserver.deps/libs')
    preserve {
        include 'mpsserver-dependencies-*.jar'
    }

    rename { filename ->
        def ra = configurations.libs.resolvedConfiguration.resolvedArtifacts.find { ResolvedArtifact ra -> ra.file.name == filename }
        String finalName
        if (ra.classifier != null) {
            finalName = "${ra.name}-${ra.classifier}.${ra.extension}"
        } else {
            finalName = "${ra.name}.${ra.extension}"
        }
        println("Renaming $filename into $finalName")
        return finalName
    }
}

task setuplocal {
	dependsOn resolveMps, resolveMpsArtifacts, resolveLibs
}

// Alias setuplocal as setup
task setup(dependsOn: setuplocal)

task generateBuildAntScripts(type: BuildLanguages, dependsOn: [setuplocal]) {
	scriptArgs = antScriptArgs
	scriptClasspath = buildScriptClasspath
	script new File('mpscode/build-meta.xml')
}

task buildServer(type: BuildLanguages, dependsOn: [generateBuildAntScripts]) {
	scriptArgs = antScriptArgs
	scriptClasspath = buildScriptClasspath
	script new File('mpscode/build-server.xml')
}

task buildExamples(type: BuildLanguages, dependsOn: [generateBuildAntScripts]) {
	scriptArgs = antScriptArgs
	scriptClasspath = buildScriptClasspath
	script new File('mpscode/build-examples.xml')
}

task runLanguageTests(type: TestLanguages, dependsOn: [buildServer, buildExamples]) {
	doFirst {
        def antTestScriptFile = file(it['script'])
        antTestScriptFile.text = antTestScriptFile.text.replace("-Xmx1024m", "-Xmx2048m")

        antTestScriptFile.text = antTestScriptFile.text
                .replace('<jvmarg value="-ea" />',
                        '<jvmarg value="-ea" /><jvmarg value="-Djava.awt.headless=true" />')
    }
	scriptArgs = antScriptArgs
	scriptClasspath = buildScriptClasspath
	script new File('mpscode/build-tests.xml')
}

task buildLauncher(type: BuildLanguages, dependsOn: [buildServer, buildExamples]) {
	scriptArgs = antScriptArgs
	scriptClasspath = buildScriptClasspath
	script new File('mpscode/build-launcher.xml')
}

task buildExtensionKit(type: BuildLanguages, dependsOn: [generateBuildAntScripts]) {
    scriptArgs = antScriptArgs
    scriptClasspath = buildScriptClasspath
    script new File('mpscode/build-extensionkit.xml')
}

task buildBuild(type: BuildLanguages, dependsOn: [generateBuildAntScripts]) {
    scriptArgs = antScriptArgs
    scriptClasspath = buildScriptClasspath
    script new File('mpscode/build-build.xml')
}

task justRunLauncher(type: RunAntScript, dependsOn: []) {
	targets = ['run.com.strumenta.mpsserver.launcher']
	scriptArgs = antScriptArgs
	scriptClasspath = buildScriptClasspath
	script new File('mpscode/build-launcher.xml')
}

task operations(type: RunAntScript, dependsOn: []) {
    targets = ['run.com.strumenta.mpsserver.operations']
    scriptArgs = antScriptArgs
    scriptClasspath = buildScriptClasspath
    script new File('mpscode/build-launcher.xml')
}

task runLauncher(dependsOn: [buildLauncher, justRunLauncher]) {

}

def examineTestFile(file) {
	def testsResult = new XmlParser().parse(file)
	def errors = testsResult.attributes()["errors"] as Integer
	def failures = testsResult.attributes()["failures"] as Integer
	def tests = testsResult.attributes()["tests"] as Integer
	def skipped = testsResult.attributes()["skipped"] as Integer
	def successes = tests - skipped - failures - errors

	testsResult.get("testcase").each { tc ->
		if (tc.get("failure").size() > 0) {
			println("[FAILED TEST]")
			println("  classname: " + tc.attributes()["classname"])
			println("  name:      " + tc.attributes()["name"])
			println("  message:   " + tc.get("failure").get(0).attributes()["message"])
			println()
		} else if (tc.get("error").size() > 0) {
			println("[FAILED TEST]")
			println("  classname: " + tc.attributes()["classname"])
			println("  name:      " + tc.attributes()["name"])
			println("  message:   " + tc.get("error").get(0).attributes()["message"])
			println()
		}
	}
	
	println("Tests     : $tests")
	println("Skipped   : $skipped")
	println("Failures  : $failures")
	println("Successes : $successes")
	println("Errors    : $errors")
	
	println()
	if (failures > 0 || errors > 0) {
		println("Check tests: FAILURE")
		throw new GradleException("Not all tests were run successfully")
	} else {		
		println("Check tests: SUCCESS")
	}	
}

task justCheckLanguageTests() {
	doLast {
		examineTestFile("mpscode/TEST-jetbrains.mps.testbench.junit.suites.AntModuleTestSuite0-mpsserver.tests.xml")
	}	 
}

task checkLanguageTests() {
	dependsOn 'runLanguageTests'
	dependsOn 'justCheckLanguageTests'
	tasks.findByName('justCheckLanguageTests').mustRunAfter 'runLanguageTests'
}

task packageServer(type: Zip, dependsOn: [buildServer]) {
    archiveBaseName = 'com.strumenta.mpsserver'
    from new File(rootDir, 'mpscode/build/artifacts')
    include 'MpsServer-core/**'
    exclude 'MpsServer-core/*.zip'
}

task packageExamples(type: Zip, dependsOn: [buildExamples]) {
    archiveBaseName = 'com.strumenta.mpsserver.examples'
    from new File(rootDir, 'mpscode/build/artifacts')
    include 'MpsServer-examples/**'
    exclude 'MpsServer-examples/*.zip'
}

task packageLauncher(type: Zip, dependsOn: [buildLauncher]) {
    archiveBaseName = 'com.strumenta.mpsserver.launcher'
    from new File(rootDir, 'mpscode/build/artifacts')
    include 'MpsServer-launcher/**'
    exclude 'MpsServer-launcher/*.zip'
}

task packageExtensionKit(type: Zip, dependsOn: [buildExtensionKit]) {
    archiveBaseName = 'com.strumenta.mpsserver.extensionkit'
    from new File(rootDir, 'mpscode/build/artifacts')
    include 'MpsServer-extensionkit/**'
    exclude 'MpsServer-extensionkit/*.zip'
}

task packageBuild(type: Zip, dependsOn: [buildBuild]) {
    archiveBaseName = 'com.strumenta.mpsserver.build'
    from new File(rootDir, 'mpscode/build/artifacts')
    include 'MpsServer-build/**'
    exclude 'MpsServer-build/*.zip'
}

publishing {
    publications {
        mpsServerCore(MavenPublication) {
            groupId 'com.strumenta.mpsserver'
            artifactId 'mpsserver-core'
            artifact packageServer
            version project.version
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                configurations.mpsArtifacts.resolvedConfiguration.firstLevelModuleDependencies.each{
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.moduleGroup)
                    dependencyNode.appendNode('artifactId', it.moduleName)
                    dependencyNode.appendNode('version',  project.version)
                    dependencyNode.appendNode('type', it.moduleArtifacts[0].type)
                }
                configurations.mps.resolvedConfiguration.firstLevelModuleDependencies.each{
                	println(it)
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.moduleGroup)
                    dependencyNode.appendNode('artifactId', it.moduleName)
                    dependencyNode.appendNode('version',  it.moduleVersion)
                    dependencyNode.appendNode('type', it.moduleArtifacts[0].type)
                    dependencyNode.appendNode('scope', 'provided')
                }
            }
        }
		mpsServerExamples(MavenPublication) {
            groupId 'com.strumenta.mpsserver'
            artifactId 'mpsserver-examples'
            artifact packageExamples
            version project.version
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                configurations.mpsArtifacts.resolvedConfiguration.firstLevelModuleDependencies.each{
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.moduleGroup)
                    dependencyNode.appendNode('artifactId', it.moduleName)
                    dependencyNode.appendNode('version',  project.version)
                    dependencyNode.appendNode('type', it.moduleArtifacts[0].type)
                }
                configurations.mps.resolvedConfiguration.firstLevelModuleDependencies.each{
                	println(it)
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.moduleGroup)
                    dependencyNode.appendNode('artifactId', it.moduleName)
                    dependencyNode.appendNode('version',  it.moduleVersion)
                    dependencyNode.appendNode('type', it.moduleArtifacts[0].type)
                    dependencyNode.appendNode('scope', 'provided')
                }
            }
        }    
		mpsServerLauncher(MavenPublication) {
            groupId 'com.strumenta.mpsserver'
            artifactId 'mpsserver-launcher'
            artifact packageLauncher
            version project.version
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                configurations.mpsArtifacts.resolvedConfiguration.firstLevelModuleDependencies.each{
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.moduleGroup)
                    dependencyNode.appendNode('artifactId', it.moduleName)
                    dependencyNode.appendNode('version',  project.version)
                    dependencyNode.appendNode('type', it.moduleArtifacts[0].type)
                }
                configurations.mps.resolvedConfiguration.firstLevelModuleDependencies.each{
                	println(it)
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.moduleGroup)
                    dependencyNode.appendNode('artifactId', it.moduleName)
                    dependencyNode.appendNode('version',  it.moduleVersion)
                    dependencyNode.appendNode('type', it.moduleArtifacts[0].type)
                    dependencyNode.appendNode('scope', 'provided')
                }
            }
        }
        mpsServerExtensionKit(MavenPublication) {
            groupId 'com.strumenta.mpsserver'
            artifactId 'mpsserver-extensionkit'
            artifact packageExtensionKit
            version project.version
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                configurations.mpsArtifacts.resolvedConfiguration.firstLevelModuleDependencies.each{
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.moduleGroup)
                    dependencyNode.appendNode('artifactId', it.moduleName)
                    dependencyNode.appendNode('version',  project.version)
                    dependencyNode.appendNode('type', it.moduleArtifacts[0].type)
                }
                configurations.mps.resolvedConfiguration.firstLevelModuleDependencies.each{
                    println(it)
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.moduleGroup)
                    dependencyNode.appendNode('artifactId', it.moduleName)
                    dependencyNode.appendNode('version',  it.moduleVersion)
                    dependencyNode.appendNode('type', it.moduleArtifacts[0].type)
                    dependencyNode.appendNode('scope', 'provided')
                }
            }
        }                    
        mpsServerBuild(MavenPublication) {
            groupId 'com.strumenta.mpsserver'
            artifactId 'mpsserver-build'
            artifact packageBuild
            version project.version
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                configurations.mpsArtifacts.resolvedConfiguration.firstLevelModuleDependencies.each{
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.moduleGroup)
                    dependencyNode.appendNode('artifactId', it.moduleName)
                    dependencyNode.appendNode('version',  project.version)
                    dependencyNode.appendNode('type', it.moduleArtifacts[0].type)
                }
                configurations.mps.resolvedConfiguration.firstLevelModuleDependencies.each{
                    println(it)
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.moduleGroup)
                    dependencyNode.appendNode('artifactId', it.moduleName)
                    dependencyNode.appendNode('version',  it.moduleVersion)
                    dependencyNode.appendNode('type', it.moduleArtifacts[0].type)
                    dependencyNode.appendNode('scope', 'provided')
                }
            }
        }           
    }
}


bintray {
    user = rootProject.findProperty('bintray_user')
    key = rootProject.findProperty('bintray_api_key')
    pkg {
    	repo = 'strumenta-oss-maven'
    	name = 'MPSServer'
    	userOrg = 'strumenta'
    	licenses = ['Apache-2.0']
    	vcsUrl = 'https://github.com/Strumenta/MPSServer.git'
    	version {
	    	name = 'v' + project.version
	    	desc = 'Version ' + project.version
	    	released = new Date()
	    	vcsTag = 'v'+project.version
	    }
    }

    publications = ['mpsServerCore', 'mpsServerExamples', 'mpsServerLauncher', 'mpsServerExtensionKit', 'mpsServerBuild'] 
    dryRun = false
    publish = true
    override = true
}

task prepareFunctionalTests(dependsOn:[packageExtensionKit, packageBuild]) {
    doLast {
        def extensionkitDir = new File(mpscode, 'build/artifacts/MpsServer-extensionkit')
        def buildPluginDir = new File(mpscode, 'build/artifacts/MpsServer-build')
        def exampleProjectDir = new File(rootDir, "functional_tests/mps_example_project_withextension") 
        def exampleProjectArtifactsDir = new File(rootDir, "functional_tests/mps_example_project_withextension/artifacts") 
        println("[extension kit plugin]")
        fileTree(extensionkitDir).visit { FileVisitDetails details -> 
            println(" * ${details.file.path}")
        }
        println()
        println("[build plugin]")
        fileTree(buildPluginDir).visit { FileVisitDetails details -> 
            println(" * ${details.file.path}")
        }
        println()
        copy {
            from {
                extensionkitDir
            }
            into exampleProjectArtifactsDir
        }
        copy {
            from {
                buildPluginDir
            }
            into exampleProjectArtifactsDir
        }
        println("[exampleProjectDir]")
        fileTree(exampleProjectDir).visit { FileVisitDetails details -> 
            println(" * ${details.file.path}")
        }
        println()        
    }
}
