import de.itemis.mps.gradle.BuildLanguages
import de.itemis.mps.gradle.TestLanguages
import de.itemis.mps.gradle.GenerateLibrariesXml
import de.itemis.mps.gradle.RunAntScript

buildscript {
    repositories {
    	mavenLocal()
		mavenCentral()
		maven { url 'https://projects.itemis.de/nexus/content/repositories/mbeddr' }
		maven { url 'https://plugins.gradle.org/m2/' }
        maven {
            name = "Modelix GitHubPackages"
            url = uri("https://maven.pkg.github.com/modelix/modelix")
            if (project.findProperty("mpsserver.github.user") != null && project.findProperty("mpsserver.github.token") != null) {
                credentials {
                    username = project.findProperty("mpsserver.github.user").toString()
                    password = project.findProperty("mpsserver.github.token").toString()
                }
            } else {
            	throw new RuntimeException("no credentials set")
            }
        }           
    }

    dependencies {
        classpath 'de.itemis.mps:mps-gradle-plugin:1.3.206.7322ef0'
    }
}

plugins {
    id 'base'
    id 'maven-publish'
    id 'signing'
    id "io.github.gradle-nexus.publish-plugin" version "1.1.0"
}

apply plugin: 'maven'
apply from: 'versions.gradle'

group "com.strumenta.mpsserver"
description = "MpsServer"
project.archivesBaseName = "mpsserver"
version = ext.mpsServerVersion

def getGithubCredentials() {
    if (project.hasProperty("mpsserver.github.user") && project.hasProperty("mpsserver.github.token")) {
        return new Tuple(project.findProperty("mpsserver.github.user").toString(), project.findProperty("mpsserver.github.token").toString())
    } else {
        logger.error("Please specify your github username (gpr.user) and access token (gpr.key) in ~/.gradle/gradle.properties")
        return null
    }
}

ext.githubCredentials = getGithubCredentials()

configurations {
	mps
	mpsArtifacts
    modelixArtifacts
	jdk
	ant_lib
	libs
	distribution
    apps
}

dependencies {
	ant_lib "org.apache.ant:ant-junit:1.10.1"
	mps "com.jetbrains:mps:$mpsVersion"
    modelixArtifacts "org.modelix:mps-model-plugin:$modelixVersion"
    modelixArtifacts "org.modelix:build-scripts:$modelixVersion"
    mpsArtifacts "de.itemis.mps:extensions:$mpsExtensionsVersion"
    apps "org.modelix:model-server-fatjar:$modelixVersion"
    libs 'com.beijunyi:parallelgit-filesystem:2.0.0'
}

repositories {	
	mavenCentral()
	maven {
		url 'https://projects.itemis.de/nexus/content/groups/OS/'
	}
    maven {
        name = "Modelix GitHubPackages"
        url = uri("https://maven.pkg.github.com/modelix/modelix")
        if (project.findProperty("mpsserver.github.user") != null && project.findProperty("mpsserver.github.token") != null) {
            credentials {
                username = project.findProperty("mpsserver.github.user").toString()
                password = project.findProperty("mpsserver.github.token").toString()
            }
        } else {
        	throw new RuntimeException("no credentials set")
        }
    }  
}

if (!hasProperty("jdk_home")) {
	def java_home = System.properties['java.home']
	def jdk_home = java_home

	// In JDK >=11 we look for javac
	if (!file("$jdk_home/bin/javac").isFile() && !file("$jdk_home/bin/javac.exe").isFile()) {
		// In JDK <11 we look for the tools.jar
		if (!file("$jdk_home/lib/tools.jar").isFile()) {
			jdk_home = jdk_home + "/.."
		}
		if (!file("$jdk_home/lib/tools.jar").isFile()) {
			throw new GradleException("Not finding the JDK...")
		}		
	} 
	
	ext.jdk_home = jdk_home
}

ext.artifactsDir = new File(rootDir, 'artifacts')
ext.mpsExtensionsDir = new File(artifactsDir, "de.itemis.mps.extensions")
ext.modelixDir = new File(artifactsDir, "modelix")
ext.mpscode = new File(rootDir, 'mpscode')
ext.mpsserverCoreBuilt = new File(new File(new File(mpscode, "build"), "artifacts"), "mpsserver-core")
ext.mpsDir = project.hasProperty('mpsPath') ? new File("${mpsPath}") : new File(artifactsDir, 'mps')
ext.distributionDependenciesDir = new File(buildDir, 'distribution-dependencies')
ext.buildScriptClasspath = project.configurations.ant_lib.fileCollection({
	true
}) + project.files("$project.jdk_home/lib/tools.jar")
ext.antScriptArgs =  [
   "-Dmps.home=${mpsDir.getAbsolutePath()}",
   "-Dproject.home=${mpscode.getAbsolutePath()}",
   "-Dmpsserver.home=${mpscode.getAbsolutePath()}",
   "-Dmps.macro.mpsserver.home=${mpscode.getAbsolutePath()}",
   "-Dmpsserver.version=${project.version}",
   "-Dartifacts.root=${artifactsDir.getAbsolutePath()}",
   "-Dmodelix.home=${modelixDir.getAbsolutePath()}",
   "-Dmpsextensions.home=${mpsExtensionsDir.getAbsolutePath()}",
   "-Dmpsserver.core.built=${mpsserverCoreBuilt.getAbsolutePath()}",
   "-Djava.awt.headless=true"
]
	
task resolveMps(type: Copy) {
	if (!project.hasProperty('mpsPath')) {
		println "Downloading MPS in ${mpsDir.getAbsolutePath()}"
		from {
			configurations.mps.resolve().collect { zipTree(it) }
		}
		into mpsDir
	} else {
		println "MPS already installed in ${mpsDir.getAbsolutePath()}"
	}
}

task resolveMpsArtifacts(type: Copy) {
	from {
		configurations.mpsArtifacts.resolve().collect { zipTree(it) }
	}
	into artifactsDir
}

task resolveModelixArtifacts(type: Copy) {
    from {
        configurations.modelixArtifacts.resolve().collect { zipTree(it) }
    }
    into new File(modelixDir, "plugins")
}

task resolveApps(type: Copy) {
    from {
        configurations.apps.singleFile
    }
    into new File(rootDir, "apps")
}

task resolveLibs(type: Sync) {
    from configurations.libs
    into file('mpscode/solutions/com.strumenta.mpsserver.deps/libs')
    preserve {
        include 'mpsserver-dependencies-*.jar'
    }

    rename { filename ->
        def ra = configurations.libs.resolvedConfiguration.resolvedArtifacts.find { ResolvedArtifact ra -> ra.file.name == filename }
        String finalName
        if (ra.classifier != null) {
            finalName = "${ra.name}-${ra.classifier}.${ra.extension}"
        } else {
            finalName = "${ra.name}.${ra.extension}"
        }
        println("Renaming $filename into $finalName")
        return finalName
    }
}

task setuplocal {
	dependsOn resolveMps, resolveMpsArtifacts, resolveModelixArtifacts, resolveLibs
}

// Alias setuplocal as setup
task setup(dependsOn: setuplocal)

task generateBuildAntScripts(type: BuildLanguages, dependsOn: [setuplocal]) {
	scriptArgs = antScriptArgs
	scriptClasspath = buildScriptClasspath
	script new File('mpscode/build-meta.xml')
}

task buildCore(type: BuildLanguages, dependsOn: [generateBuildAntScripts]) {
	scriptArgs = antScriptArgs
	scriptClasspath = buildScriptClasspath
	script new File('mpscode/build-core.xml')
}

task buildExamples(type: BuildLanguages, dependsOn: [generateBuildAntScripts]) {
	scriptArgs = antScriptArgs
	scriptClasspath = buildScriptClasspath
	script new File('mpscode/build-examples.xml')
}

task buildLauncher(type: BuildLanguages, dependsOn: [buildCore]) {
	scriptArgs = antScriptArgs
	scriptClasspath = buildScriptClasspath
	script new File('mpscode/build-launcher.xml')
}

task buildExtensionKit(type: BuildLanguages, dependsOn: [generateBuildAntScripts]) {
    scriptArgs = antScriptArgs
    scriptClasspath = buildScriptClasspath
    script new File('mpscode/build-extensionkit.xml')
}

task buildModelixExtension(type: BuildLanguages, dependsOn: [buildCore]) {
    scriptArgs = antScriptArgs
    scriptClasspath = buildScriptClasspath
    script new File('mpscode/build-modelix.xml')
}

task buildBuild(type: BuildLanguages, dependsOn: [generateBuildAntScripts]) {
    scriptArgs = antScriptArgs
    scriptClasspath = buildScriptClasspath
    script new File('mpscode/build-build.xml')
}

task buildAll(dependsOn: [buildBuild, buildCore, buildLauncher, buildModelixExtension, buildExamples]) {

}

task justRunLauncher(type: RunAntScript, dependsOn: []) {
	targets = ['run.com.strumenta.mpsserver.launcher']
	scriptArgs = antScriptArgs
	scriptClasspath = buildScriptClasspath
	script new File('mpscode/build-launcher-with-modelix.xml')
}

task operations(type: RunAntScript, dependsOn: []) {
    targets = ['run.com.strumenta.mpsserver.operations']
    scriptArgs = antScriptArgs
    scriptClasspath = buildScriptClasspath
    script new File('mpscode/build-launcher.xml')
}

task runLauncher(dependsOn: [buildLauncher, justRunLauncher, buildModelixExtension]) {

}

apply from: 'package.gradle'
apply from: 'tests.gradle'
apply from: 'publication.gradle'
